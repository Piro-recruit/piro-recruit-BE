name: Blue-Green Deploy

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]
env:
  DOCKER_IMAGE: kimgyuill/piro-recruiting

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to NCP Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NCP_HOST }}
          username: root
          password: ${{ secrets.NCP_ROOT_PASSWORD }}
          debug: true
          timeout: 60s
          command_timeout: 60s
          script: |
            echo "🚀 Starting Simple Deployment..."
            
            # DockerHub에서 최신 이미지 pull
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            # Docker 네트워크 확인 및 생성
            docker network ls | grep app_backend || docker network create app_backend

            # 기존 DB 컨테이너를 네트워크에 연결
            docker network connect app_backend piro-recruit-db 2>/dev/null || true

            # 기존 애플리케이션 컨테이너 정리
            docker stop piro-recruit-app 2>/dev/null || true
            docker rm piro-recruit-app 2>/dev/null || true

            # 새 컨테이너 실행
            docker run -d \
              --name piro-recruit-app \
              --network app_backend \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=piro_recruit \
              --restart always \
              ${{ env.DOCKER_IMAGE }}:latest

            # 컨테이너 시작 대기 (30초)
            echo "⏰ Waiting for application to start (30s)..."
            sleep 30

            # 헬스체크
            echo "🏥 Performing health check..."
            for i in {1..10}; do
              if curl -f http://localhost:8080/actuator/health; then
                echo "✅ Health check passed!"
                echo "🎉 Simple deployment completed successfully!"
                echo "🌐 Application is running on port 8080"
                exit 0
              else
                echo "❌ Health check failed, attempt $i/10"
                sleep 10
              fi
            done

            # 헬스체크 실패 시
            echo "💥 Health check failed, checking logs..."
            docker logs piro-recruit-app --tail 50
            exit 1