name: Blue-Green Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: kimgyuill/recruit-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Blue-Green 배포 스크립트 실행
            cd /opt/app
            
            # 현재 실행 중인 컨테이너 확인
            CURRENT_PORT=$(sudo docker ps --format "table {{.Names}}\t{{.Ports}}" | grep recruit-app | grep -o '8080\|8081' | head -1)
            
            if [ "$CURRENT_PORT" = "8080" ]; then
              NEW_PORT="8081"
              NEW_CONTAINER="piro-recruit-app-green"
              OLD_CONTAINER="piro-recruit-app"
            else
              NEW_PORT="8080"
              NEW_CONTAINER="piro-recruit-app-blue"  
              OLD_CONTAINER="piro-recruit-app-green"
            fi
            
            echo "Deploying to port $NEW_PORT"
            
            # 새 컨테이너 실행
            sudo docker run -d \
              --name $NEW_CONTAINER \
              --network app_backend \
              -p $NEW_PORT:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_HOST=piro-recruit-db \
              -e DB_USERNAME=postgres \
              -e DB_PASSWORD=rb87568756 \
              --restart always \
              ${{ env.DOCKER_IMAGE }}:latest
            
            # 헬스체크 (30초 대기)
            echo "Waiting for new container to be ready..."
            sleep 30
            
            # 헬스체크 수행
            for i in {1..10}; do
              if curl -f http://localhost:$NEW_PORT/actuator/health; then
                echo "Health check passed!"
            
                # Nginx 업스트림 변경
                sudo sed -i "s/127.0.0.1:8080/127.0.0.1:$NEW_PORT/" /etc/nginx/sites-available/blue-green
                sudo sed -i "s/127.0.0.1:8081/127.0.0.1:$NEW_PORT/" /etc/nginx/sites-available/blue-green
                sudo nginx -t && sudo systemctl reload nginx
            
                # 이전 컨테이너 정리 (10초 후)
                sleep 10
                sudo docker stop $OLD_CONTAINER || true
                sudo docker rm $OLD_CONTAINER || true
            
                echo "Blue-Green deployment completed successfully!"
                exit 0
              else
                echo "Health check failed, attempt $i/10"
                sleep 10
              fi
            done
            
            # 헬스체크 실패 시 롤백
            echo "Health check failed, rolling back..."
            sudo docker stop $NEW_CONTAINER || true
            sudo docker rm $NEW_CONTAINER || true
            exit 1